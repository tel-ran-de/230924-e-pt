# Тема: Цикл while. Операторы break, continue, else.

# Упражнение 1: Поиск числа
#
# Напишите программу, которая запрашивает у пользователя числа, пока он не введет число совпадающее
# с переменной num (num = любое число от 0 до 100).  Если введенное число меньше num, программа должна
# выводить сообщение "Слишком маленькое число" и продолжать запрашивать числа. Если число больше num,
# программа должна вывести сообщение "Вы ввели большее число" и продолжать запрашивать числа.
# Если пользователь угадал, то программа должна вывести "Вы угадали число" и завершиться.
# ОТВЕТ:
# Заданное число (num = любое число от 0 до 100)
num = 50
# Запуск цикла
while True:
    try:
        # Запрос числа у пользователя
        user_input = int(input("Введите число от 0 до 100: "))

        # Проверка введенного числа
        if user_input < num:
            print("Слишком маленькое число")
        elif user_input > num:
            print("Вы ввели большее число")
        else:
            print("Вы угадали число!")
            break  # Завершение программы, если число угадано
    except ValueError:
        print("Пожалуйста, введите корректное число.")

# Упражнение 2: Проверка пароля
#
# Напишите программу, которая будет запрашивать у пользователя пароль до тех пор, пока не будет введен
# правильный пароль "python123", либо пока не закончатся попытки. Если введенный пароль содержит пробелы,
# программа должна выводить сообщение "Пароль не должен содержать пробелов" и продолжать запрашивать пароль.
# Если введен правильный пароль, программа должна выводить сообщение "Доступ разрешен" и завершаться.
# Если после трех неправильных попыток пароль не введен правильно, программа должна выводить сообщение
# "Превышено количество попыток" и завершаться.
# ОТВЕТ:
# Правильный пароль
correct_password = "python123"
# Количество попыток
attempts = 3

# Цикл для ввода пароля
while attempts > 0:
    password = input("Введите пароль: ")

    # Проверка на пробелы в пароле
    if " " in password:
        print("Пароль не должен содержать пробелов.")
        continue

    # Проверка правильности пароля
    if password == correct_password:
        print("Доступ разрешен")
        break
    else:
        attempts -= 1
        if attempts > 0:
            print(f"Неправильный пароль. Осталось попыток: {attempts}")
        else:
            print("Превышено количество попыток")

#
# Упражнение 3: Работа со списком покупок
#
# Напишите программу, которая будет запрашивать у пользователя элементы для списка покупок до тех пор,
# пока не будет введено слово "стоп", либо пока количество покупок не станет больше 6. Если введенное
# слово уже есть в списке, программа должна выводить сообщение "Этот элемент уже в списке" и продолжать
# запрашивать новые элементы. Если введено слово "стоп", программа должна выводить сообщение
# "Формирование списка завершено" и завершаться. Если количество покупок ставится больше 6,
# то программа должна вывести: “Превышен лимит покупок.” и завершиться.
# Перед завершением программа должна выводить итоговый список покупок и общее количество элементов в нем.
# ОТВЕТ:
# Создаем пустой список для покупок
shopping_list = []
# Лимит на количество покупок
limit = 6

# Цикл для ввода элементов в список покупок
while len(shopping_list) < limit:
    item = input("Введите элемент для списка покупок (или 'стоп' для завершения): ").lower()

    # Проверка на завершение ввода
    if item == "стоп":
        print("Формирование списка завершено.")
        break

    # Проверка на дублирование элемента в списке
    if item in shopping_list:
        print("Этот элемент уже в списке.")
        continue

    # Добавление элемента в список
    shopping_list.append(item)

# Проверка, достигнут ли лимит
if len(shopping_list) >= limit:
    print("Превышен лимит покупок.")

# Вывод итогового списка покупок и их количества
print("\nВаш список покупок:")
for i, item in enumerate(shopping_list, start=1):
    print(f"{i}. {item}")

print(f"Общее количество элементов: {len(shopping_list)}")


# Тема: Цикл for

# Упражнение 1: Подсчет гласных в строке
#
# Напишите программу, которая принимает строку от пользователя и подсчитывать количество гласных букв (a, e, i, o, u)
# в этой строке.Используйте цикл for и условие if.
## Ввод строки от пользователя
user_input = input("Введите строку: ").lower()

# Список гласных
vowels = "aeiou"

# Переменная для подсчета гласных
vowel_count = 0

# Цикл для проверки каждой буквы в строке
for char in user_input:
    if char in vowels:
        vowel_count += 1

# Вывод результата
print("Количество гласных букв в строке:", vowel_count)


# Упражнение 2: Генерация и вывод последовательности чисел
#
# Напишите программу, которая генерит и выводит последовательность чисел от 1 до 20,
# но выводит "Fizz" вместо чисел, кратных 3, "Buzz" вместо чисел, кратных 5, и "FizzBuzz"
# вместо чисел, кратных как 3, так и 5. Используйте цикл for и функцию range.
# ОТВЕТ:
# Цикл по числам от 1 до 20
for num in range(1, 21):
    if num % 3 == 0 and num % 5 == 0:
        print("FizzBuzz")
    elif num % 3 == 0:
        print("Fizz")
    elif num % 5 == 0:
        print("Buzz")
    else:
        print(num)

# Проект 1: Управление библиотекой
#
# Описание:
# Разработайте программу для управления библиотекой. Программа должна позволять добавлять книги в библиотеку,
# удалять книги, искать книги по автору и выводить список всех книг с их авторами и статусами (в наличии или выдана).
#
# Требования: Реализуйте работу всех пунктов меню.
#
# library = [["Война и мир", "Толстой", "в наличии"],
#            ["Преступление и наказание", "Достоевский", "выдана"],
#            ["Мастер и Маргарита", "Булгаков", "в наличии"]]
#
# while True:
#     print("\nМеню")
#     print("1. Показать список всех книг")
#     print("2. Добавить книгу")
#     print("3. Удалить книгу")
#     print("4. Поменять статус книги")
#     print("5. Показать книги определенного автора")
#     print("6. Показать книги с определенным статусом")
#     choice = input("Выберите действие, введя его номер: ")
# ОТВЕТ:
# Изначальный список книг в библиотеке
library = [
    ["Война и мир", "Толстой", "в наличии"],
    ["Преступление и наказание", "Достоевский", "выдана"],
    ["Мастер и Маргарита", "Булгаков", "в наличии"]
]


# Функция для показа всех книг
def show_books():
    print("\nСписок всех книг:")
    for book in library:
        print(f"Название: {book[0]}, Автор: {book[1]}, Статус: {book[2]}")


# Функция для добавления книги
def add_book():
    title = input("Введите название книги: ")
    author = input("Введите автора книги: ")
    status = input("Введите статус книги (в наличии/выдана): ")
    library.append([title, author, status])
    print(f"Книга '{title}' добавлена в библиотеку.")


# Функция для удаления книги
def remove_book():
    title = input("Введите название книги, которую хотите удалить: ")
    for book in library:
        if book[0].lower() == title.lower():
            library.remove(book)
            print(f"Книга '{title}' удалена.")
            return
    print(f"Книга '{title}' не найдена.")


# Функция для изменения статуса книги
def change_status():
    title = input("Введите название книги, для которой хотите изменить статус: ")
    for book in library:
        if book[0].lower() == title.lower():
            new_status = input("Введите новый статус (в наличии/выдана): ")
            book[2] = new_status
            print(f"Статус книги '{title}' изменен на '{new_status}'.")
            return
    print(f"Книга '{title}' не найдена.")


# Функция для показа книг по автору
def show_books_by_author():
    author = input("Введите имя автора: ")
    print(f"\nКниги автора {author}:")
    for book in library:
        if book[1].lower() == author.lower():
            print(f"Название: {book[0]}, Статус: {book[2]}")
    print(
        "По вашему запросу книг не найдено." if not any(book[1].lower() == author.lower() for book in library) else "")


# Функция для показа книг с определенным статусом
def show_books_by_status():
    status = input("Введите статус (в наличии/выдана): ")
    print(f"\nКниги со статусом '{status}':")
    for book in library:
        if book[2].lower() == status.lower():
            print(f"Название: {book[0]}, Автор: {book[1]}")
    print(
        "По вашему запросу книг не найдено." if not any(book[2].lower() == status.lower() for book in library) else "")


# Основное меню программы
while True:
    print("\nМеню")
    print("1. Показать список всех книг")
    print("2. Добавить книгу")
    print("3. Удалить книгу")
    print("4. Поменять статус книги")
    print("5. Показать книги определенного автора")
    print("6. Показать книги с определенным статусом")
    print("7. Выйти из программы")

    choice = input("Выберите действие, введя его номер: ")

    if choice == "1":
        show_books()
    elif choice == "2":
        add_book()
    elif choice == "3":
        remove_book()
    elif choice == "4":
        change_status()
    elif choice == "5":
        show_books_by_author()
    elif choice == "6":
        show_books_by_status()
    elif choice == "7":
        print("Выход из программы...")
        break
    else:
        print("Неверный выбор. Пожалуйста, выберите корректный пункт меню.")

#     # Продолжите программу ниже.


# Проект 2: Анализ посещаемости на сайте
#
# Разработайте программу для анализа посещаемости на сайте. Программа должна позволять вводить количество посещений
# за каждый день недели, определять дни с наибольшей и наименьшей посещаемостью, рассчитывать среднюю посещаемость
# за неделю и выводить дни с посещаемостью выше среднего.
#
# days = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
# visits = []
# ОТВЕТ:
# Дни недели
days = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
# Список для хранения посещений
visits = []

# Ввод количества посещений за каждый день недели
for day in days:
    while True:
        try:
            visit = int(input(f"Введите количество посещений за {day}: "))
            visits.append(visit)
            break
        except ValueError:
            print("Пожалуйста, введите целое число.")

# Определение дня с максимальной и минимальной посещаемостью
max_visits = max(visits)
min_visits = min(visits)
max_day = days[visits.index(max_visits)]
min_day = days[visits.index(min_visits)]

# Расчет средней посещаемости
average_visits = sum(visits) / len(visits)

# Вывод результатов
print("\nРезультаты анализа посещаемости:")
print(f"Максимальная посещаемость: {max_visits} (день: {max_day})")
print(f"Минимальная посещаемость: {min_visits} (день: {min_day})")
print(f"Средняя посещаемость за неделю: {average_visits:.2f}")

# Вывод дней с посещаемостью выше среднего
print("\nДни с посещаемостью выше среднего:")
for i in range(len(visits)):
    if visits[i] > average_visits:
        print(f"{days[i]}: {visits[i]} посещений")

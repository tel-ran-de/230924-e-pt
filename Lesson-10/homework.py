# Тема: Цикл while. Операторы break, continue, else.
from logging.config import stopListening

# Упражнение 1: Поиск числа
#
# Напишите программу, которая запрашивает у пользователя числа, пока он не введет число совпадающее
# с переменной num (num = любое число от 0 до 100).  Если введенное число меньше num, программа должна
# выводить сообщение "Слишком маленькое число" и продолжать запрашивать числа. Если число больше num,
# программа должна вывести сообщение "Вы ввели большее число" и продолжать запрашивать числа.
# Если пользователь угадал, то программа должна вывести "Вы угадали число" и завершиться.

#num = 50
#while True:
#    user_input = int(input('Введите число'))
#    if user_input < num:
#        print('Слишком маленькое число')
#    elif user_input > num:
#        print('Слишком большое число')
#    elif user_input == num:
#
#        print('Вы угадали число')
#       break

# Упражнение 2: Проверка пароля
#
# Напишите программу, которая будет запрашивать у пользователя пароль до тех пор, пока не будет введен
# правильный пароль "python123", либо пока не закончатся попытки. Если введенный пароль содержит пробелы,
# программа должна выводить сообщение "Пароль не должен содержать пробелов" и продолжать запрашивать пароль.
# Если введен правильный пароль, программа должна выводить сообщение "Доступ разрешен" и завершаться.
# Если после трех неправильных попыток пароль не введен правильно, программа должна выводить сообщение
# "Превышено количество попыток" и завершаться.
#correct_password = "python123"
#attempts = 3
#while attempts > 0:
#    password = input("Введите пароль: ")
#    if " " in password:
#        print("Пароль не должен содержать пробелов")
#    elif password == correct_password:
#        print("Доступ разрешен")
#        break
#    else:
#        attempts -= 1
#        print(f"Неправильный пароль. Осталось попыток: {attempts}")
#
#    if attempts == 0:
#        print("Превышено количество попыток")

# Упражнение 3: Работа со списком покупок
#
# Напишите программу, которая будет запрашивать у пользователя элементы для списка покупок до тех пор,
# пока не будет введено слово "стоп", либо пока количество покупок не станет больше 6. Если введенное
# слово уже есть в списке, программа должна выводить сообщение "Этот элемент уже в списке" и продолжать
# запрашивать новые элементы. Если введено слово "стоп", программа должна выводить сообщение
# "Формирование списка завершено" и завершаться. Если количество покупок ставится больше 6,
# то программа должна вывести: “Превышен лимит покупок.” и завершиться.
# Перед завершением программа должна выводить итоговый список покупок и общее количество элементов в нем.
#shopping_list = []
#while True:
#    item = input("Введите элемент для списка покупок (или 'стоп' для завершения): ")
#    if item == 'стоп':
#        print("Формирование списка завершено")
#        break
#    if item in shopping_list:
#        print("Этот элемент уже в списке")
#        continue
#    shopping_list.append(item)
#    if len(shopping_list) > 6:
#        print("Превышен лимит покупок.")
#        break
#print("Итоговый список покупок:", shopping_list)
#print("Общее количество элементов:", len(shopping_list))
# Тема: Цикл for

# Упражнение 1: Подсчет гласных в строке
#
# Напишите программу, которая принимает строку от пользователя и подсчитывать количество гласных букв (a, e, i, o, u)
# в этой строке.Используйте цикл for и условие if.
        # Запрашиваем строку у пользователя
#user_input = input("Введите строку: ")
        # Определяем гласные буквы
#vowels = "aeiouAEIOU"
#count = 0
#for char in user_input:
#    if char in vowels:
#        count+=1
#print(f"Количество гласных букв в строке: {count}")

# Упражнение 2: Генерация и вывод последовательности чисел
#
# Напишите программу, которая генерит и выводит последовательность чисел от 1 до 20,
# но выводит "Fizz" вместо чисел, кратных 3, "Buzz" вместо чисел, кратных 5, и "FizzBuzz"
# вместо чисел, кратных как 3, так и 5. Используйте цикл for и функцию range.
        #выводить последовательность чисел от 1 до 20
#for num in range(1, 21):
        # Выводить "FizzBuzz" вместо чисел, кратных как 3, так и 5.
#    if num % 3 == 0 and num % 5 == 0:
#        print("FizzBuzz")
        # выводить "Fizz" вместо чисел, кратных 3
#    elif num % 3 == 0:
#        print("Fizz")
#         Выводить "Buzz" вместо чисел, кратных 5
#    elif num % 5 == 0:
#        print("Buzz")
        # В остальных случиях
#    else:
#        print(num)


# Проект 1: Управление библиотекой
#
# Описание:
# Разработайте программу для управления библиотекой. Программа должна позволять добавлять книги в библиотеку,
# удалять книги, искать книги по автору и выводить список всех книг с их авторами и статусами (в наличии или выдана).
#
# Требования: Реализуйте работу всех пунктов меню.
#
library = [
    ["Война и мир", "Толстой", "в наличии"],
    ["Преступление и наказание", "Достоевский", "выдана"],
    ["Мастер и Маргарита", "Булгаков", "в наличии"]
]

while True:
    print("\nМеню")
    print("1. Показать список всех книг")
    print("2. Добавить книгу")
    print("3. Удалить книгу")
    print("4. Поменять статус книги")
    print("5. Показать книги определенного автора")
    print("6. Показать книги с определенным статусом")
    choice = input("Выберите действие, введя его номер: ")
    #     # Продолжите программу ниже.

    if choice == "1":
        # Показать список всех книг
        for book in library:
            print(f"{book[0]} - {book[1]} ({book[2]})")

    elif choice == "2":
        # Добавить книгу
        title = input("Введите название книги: ")
        author = input("Введите автора книги: ")
        status = "в наличии"
        library.append([title, author, status])
        print(f"Книга '{title}' добавлена.")

    elif choice == "3":
        # Удалить книгу
        title = input("Введите название книги, которую хотите удалить: ")
        library = [book for book in library if book[0] != title]
        print(f"Книга '{title}' удалена.")

    elif choice == "4":
        # Поменять статус книги
        title = input("Введите название книги, статус которой хотите изменить: ")
        new_status = input("Введите новый статус ('в наличии' или 'выдана'): ")
        for book in library:
            if book[0] == title:
                book[2] = new_status
                print(f"Статус книги '{title}' изменен на '{new_status}'.")

    elif choice == "5":
        # Показать книги определенного автора
        author = input("Введите имя автора: ")
        author_books = [book for book in library if book[1] == author]
        for book in author_books:
            print(f"{book[0]} - {book[1]} ({book[2]})")

    elif choice == "6":
        # Показать книги с определенным статусом
        status = input("Введите статус ('в наличии' или 'выдана'): ")
        status_books = [book for book in library if book[2] == status]
        for book in status_books:
            print(f"{book[0]} - {book[1]} ({book[2]})")

    else:
        print("Некорректный выбор. Пожалуйста, введите число от 1 до 6.")

    continue_choice = input("Хотите продолжить? (да/нет): ")
    if continue_choice.lower() != "да":
        break

# Проект 2: Анализ посещаемости на сайте
#
# Разработайте программу для анализа посещаемости на сайте. Программа должна позволять вводить количество посещений
# за каждый день недели, определять дни с наибольшей и наименьшей посещаемостью, рассчитывать среднюю посещаемость
# за неделю и выводить дни с посещаемостью выше среднего.
#
days = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
visits = []
# Запрашиваем количество посещений за каждый день недели
for day in days:
    visit_count = int(input(f"Введите количество посещений за {day}: "))
    visits.append(visit_count)
# Определяем дни с наибольшей и наименьшей посещаемостью
max_visits = max(visits)
min_visits = min(visits)
day_max_visits = days[visits.index(max_visits)]
day_min_visits = days[visits.index(min_visits)]

# Рассчитываем среднюю посещаемость за неделю
average_visits = sum(visits) / len(visits)

# Выводим результаты
print(f"День с наибольшей посещаемостью: {day_max_visits} ({max_visits} посещений)")
print(f"День с наименьшей посещаемостью: {day_min_visits} ({min_visits} посещений)")
print(f"Средняя посещаемость за неделю: {average_visits:.2f} посещений")

# Выводим дни с посещаемостью выше среднего
print("Дни с посещаемостью выше среднего:")
for day, visit_count in zip(days, visits):
    if visit_count > average_visits:
        print(f"{day} ({visit_count} посещений)")
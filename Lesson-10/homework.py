# Тема: Цикл while. Операторы break, continue, else.

# Упражнение 1: Поиск числа
#
# Напишите программу, которая запрашивает у пользователя числа, пока он не введет число совпадающее
# с переменной num (num = любое число от 0 до 100).  Если введенное число меньше num, программа должна
# выводить сообщение "Слишком маленькое число" и продолжать запрашивать числа. Если число больше num,
# программа должна вывести сообщение "Вы ввели большее число" и продолжать запрашивать числа.
# Если пользователь угадал, то программа должна вывести "Вы угадали число" и завершиться.

num = 66
while True:
    x = int(input("Введите число от 0 до 100: "))
    if x < num:
        print("Введено слишком маленькое число")
    elif x > num:
        print("Введено слишком большое число")
    else:
        print("Вы угадали число")
        break

# Упражнение 2: Проверка пароля
#
# Напишите программу, которая будет запрашивать у пользователя пароль до тех пор, пока не будет введен
# правильный пароль "python123", либо пока не закончатся попытки. Если введенный пароль содержит пробелы,
# программа должна выводить сообщение "Пароль не должен содержать пробелов" и продолжать запрашивать пароль.
# Если введен правильный пароль, программа должна выводить сообщение "Доступ разрешен" и завершаться.
# Если после трех неправильных попыток пароль не введен правильно, программа должна выводить сообщение
# "Превышено количество попыток" и завершаться.

passw = "python123"
attempts = 0
while attempts < 3:
    p = input("Введите пароль: ")
    if " " in p:
        attempts += 1
        print("Пароль не должен содержать пробелов")
        continue
    elif p != passw:
        attempts += 1
        print("Неверный пароль")
        continue
    else:
        print("Доступ разрешён")
        break
if attempts == 3:
    print("Превышено количество попыток")

# Упражнение 3: Работа со списком покупок
#
# Напишите программу, которая будет запрашивать у пользователя элементы для списка покупок до тех пор,
# пока не будет введено слово "стоп", либо пока количество покупок не станет больше 6. Если введенное
# слово уже есть в списке, программа должна выводить сообщение "Этот элемент уже в списке" и продолжать
# запрашивать новые элементы. Если введено слово "стоп", программа должна выводить сообщение
# "Формирование списка завершено" и завершаться. Если количество покупок ставится больше 6,
# то программа должна вывести: “Превышен лимит покупок.” и завершиться.
# Перед завершением программа должна выводить итоговый список покупок и общее количество элементов в нем.

kauflist = []
kauf_summ = 0
print("Список покупок.")
while kauf_summ <= 6:
    kauf = input("Введите название товара, либо 'стоп' для завершения списка: ")
    kauf_summ += 1
    if kauf == "стоп":
        kauf_summ -= 1
        print("Список завершён")
        break
    elif kauf_summ > 6:
        print("Превышен лимит покупок")
        kauf_summ -= 1
        break
    kauflist.append(kauf)
print(f"Итоговый список покупок: {kauflist}")
print(f"Колличество элементов в списке: {kauf_summ}")

# Тема: Цикл for

# Упражнение 1: Подсчет гласных в строке
#
# Напишите программу, которая принимает строку от пользователя и подсчитывать количество гласных букв (a, e, i, o, u)
# в этой строке.Используйте цикл for и условие if.

buch = "aeiouAEIOU"
wort = input("Введите слово: ")
num = 0
for b in wort:
    if b in buch:
        num += 1
print(f"В слове {wort}, {num} гласных букв.")

# Упражнение 2: Генерация и вывод последовательности чисел
#
# Напишите программу, которая генерит и выводит последовательность чисел от 1 до 20,
# но выводит "Fizz" вместо чисел, кратных 3, "Buzz" вместо чисел, кратных 5, и "FizzBuzz"
# вместо чисел, кратных как 3, так и 5. Используйте цикл for и функцию range.

for i in range(1, 21):
    if i % 3 == 0 and i % 5 == 0:
        print('FizzBuzz')
    elif i % 3 == 0:
        print('Fizz')
    elif i % 5 == 0:
        print('Buzz')
    else:
        print(i)

# Проект 1: Управление библиотекой
#
# Описание:
# Разработайте программу для управления библиотекой. Программа должна позволять добавлять книги в библиотеку,
# удалять книги, искать книги по автору и выводить список всех книг с их авторами и статусами (в наличии или выдана).
#
# Требования: Реализуйте работу всех пунктов меню.
#
library = [["Война и мир", "Толстой", "в наличии"],
            ["Преступление и наказание", "Достоевский", "выдана"],
            ["Мастер и Маргарита", "Булгаков", "в наличии"]]

def zeig_book():
    print("\nОбщий список книг")
    for book in library:
        print(f"Название: {book[0]}, Автор: {book[1]}, Статус: {book[2]}")
def add_book():
    title = input("Введите название книги: ")
    avtor = input("Введите автора")
    status = input("введите статус 'выдана / в наличии': ")
    library.append([title, avtor, status])
    print(f"Книга {title} добавлена")
def del_book():
    title = input("Введите название книги для удаления: ")
    for book in library:
        if book[0] == title:
            library.remove(book)
            print(f"Книга {title} удалена")
            return
    print("Книга не найдена")
def change_status():
    title = input("Введите название книги для изменения статуса: ")
    for book in library:
        if book[0] == title:
            new_status = input("Введите новый статус книги (в наличии/выдана): ")
            book[2] = new_status
            print(f"Статус книги '{title}' изменен на '{new_status}'.")
            return
    print("Книга не найдена.")
def such_book_avtor():
    avtor = input("Введите автора: ")
    print(f"\nКниги автора '{avtor}'")
    found = False
    for book in library:
        if book[1] == avtor:
            print(f"Название: {book[0]}, Статус: {book[2]}")
            found = True
    if not found:
        print("Не найдено")
def zeig_book_status():
    status = input("Введите статус книги в 'наличии' / 'выдана': ")
    print(f"\nКниги в статусе '{status}'")
    found = False
    for book in library:
        if book[2] == status:
            print(f"\nНазвание: {book[0]}, Автор: {book[1]}")
            found = True
    if not found:
        print("Не найдено")
while True:
    print("\nМеню")
    print("1. Показать список всех книг")
    print("2. Добавить книгу")
    print("3. Удалить книгу")
    print("4. Поменять статус книги")
    print("5. Показать книги определенного автора")
    print("6. Показать книги с определенным статусом")
    choice = input("Выберите действие, введя его номер: ")

#     # Продолжите программу ниже.

    if choice == "1":
        zeig_book()
    elif choice == "2":
        add_book()
    elif choice == "3":
        del_book()
    elif choice == "4":
        change_status()
    elif choice == "5":
        such_book_avtor()
    elif choice == "6":
        zeig_book_status()
    elif choice == "0":
        print("Выход из программы")
        break
    else:
        print("Что-то пошло не так, попробуйте ещё раз")



# Проект 2: Анализ посещаемости на сайте
#
# Разработайте программу для анализа посещаемости на сайте. Программа должна позволять вводить количество посещений
# за каждый день недели, определять дни с наибольшей и наименьшей посещаемостью, рассчитывать среднюю посещаемость
# за неделю и выводить дни с посещаемостью выше среднего.
#
days = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
visits = []

for day in days:
    while True:
        visit_count = int(input(f"Введите количество посещений за {day}: "))
        visits.append(visit_count)
        break
max_visits = max(visits)
min_visits = min(visits)
days_max_visits = [days[i] for i in range(len(visits)) if visits[i] == max_visits]
days_min_visits = [days[i] for i in range(len(visits)) if visits[i] == min_visits]
average_visits = sum(visits) / len(visits)
days_above_average = [days[i] for i in range(len(visits)) if visits[i] > average_visits]
print("\nРезультаты анализа посещаемости:")
print(f"Наибольшая посещаемость: {max_visits} - Дни: {', '.join(days_max_visits)}")
print(f"Наименьшая посещаемость: {min_visits} - Дни: {', '.join(days_min_visits)}")
print(f"Средняя посещаемость за неделю: {average_visits:.2f}")
print(f"Дни с посещаемостью выше среднего: {', '.join(days_above_average)}")
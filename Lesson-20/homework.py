# Тема: Обработка исключений (try/except/else/finally)

# Задача 1: Деление чисел
# Напишите функцию, которая принимает два числа в качестве аргументов и возвращает результат их деления.
# Обработайте исключения для случаев, когда:
# - деление на ноль
# - ввод не числовых значений.
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print('деление на ноль')
    except TypeError:
        print('ввод не числовых значений')
    else:
        print(f'result: {result}')
        return result
divide(5, '3')
divide(5, 3)
divide(5, 0)

# Задача 2: Обработка пользовательского ввода
# Напишите программу, которая запрашивает у пользователя ввод числа и выводит его квадрат.
# Обработайте исключения для случаев, когда ввод не является числом.
def power_two():
    val = input("Введите число: ")
    try:
        result = float(val)**2
    except ValueError:
        print('ввод не числовых значений')
    else:
        print(f'Квадрат числа {float(val)} равен {result}')
        return result


power_two()


# Задача 3. Вернитесь к задачам предыдущего урока из файла exercise_1 и добавьте в решение обработку возможных ошибок,
# которые могут случиться при работе с файлами (FileNotFoundError, PermissionError, IOError).
# Проверьте, что ошибки обрабатываются на примере FileNotFoundError.
# Тема: Чтение и запись данных в файл.

# Задание 1: Чтение данных из файла
# 1. Откройте файл `data.txt` для чтения.
# 2. Прочитайте весь контент файла и выведите его на экран.
# 3. Прочитайте первые 10 символов файла и выведите их на экран.
# 4. Прочитайте одну строку из файла и выведите ее на экран.
# 5. Прочитайте все строки файла и выведите их на экран.
import os
import stat

try:
    file = open('file.txt' 'r')
    text = file.read()
except FileNotFoundError:
    print('Вы пытаетесь открыть несуществующий файл!')
except PermissionError:
    print("У вас нет права доступа в файлу")
except IOError:
    print('Ошибка ввода/вывода')
else:
    print(text)
    file.close()

# Задание 2: Запись данных в файл
# 1. Откройте (создайте) файл `output.txt` для записи.
# 2. Запишите в файл строку "Hello, World!".
# 3. Запишите в файл список строк: ["This is line 1\n", "This is line 2\n"].
# 4. Закройте файл.
# 5. Откройте файл `output.txt` для чтения и выведите его содержимое на экран.

os.chmod("output.txt", stat.S_ENFMT)
try:
    file = open('output.txt', 'w')
except PermissionError:
    print('Нет права доступа к файлу!')
except FileNotFoundError:
    print('Вы пытаетесь открыть несуществующий файл!')
except IOError:
    print('Ошибка ввода/вывода')
else:
    file.write('Hello, World!')
    file.close()

# Задание 3: Добавление данных в файл
# 1. Откройте (создайте) файл `log.txt` для добавления данных.
# 2. Добавьте строку "New log entry\n" в конец файла.
# 3. Добавьте список строк ["Log entry 1\n", "Log entry 2\n"] в конец файла.
# 4. Закройте файл.
# 5. Откройте файл `log.txt` для чтения и выведите его содержимое на экран.

os.chmod("log.txt", stat.S_ENFMT)
try:
    file = open('log.txt', 'w')
except PermissionError:
    print('Нет права доступа к файлу!')
except FileNotFoundError:
    print('Вы пытаетесь открыть несуществующий файл!')
except IOError:
    print('Ошибка ввода/вывода')
else:
    file.writeline('New log entry\n')
    file.close()
# Задание 4: Работа с указателем
# 1. Откройте (создайте) файл `pointer_example.txt` для чтения и записи.
# 2. Запишите в файл строку "Python File Handling\n".
# 3. Переместите указатель в начало файла и прочитайте первую строку.
# 4. Переместите указатель на позицию 7 и прочитайте следующие 5 символов.
# 5. Переместите указатель в конец файла и добавьте строку "End of file\n".
# 6. Переместите указатель в начало файла и прочитайте весь файл.
try:
    file = open('pointer_example.txt', 'r+')
except PermissionError:
    print('Нет права доступа к файлу!')
except FileNotFoundError:
    print('Вы пытаетесь открыть несуществующий файл!')
except IOError:
    print('Ошибка ввода/вывода')
else:
    file.writeline("Python File Handling\n")
    file.close()

# Тема: Расространение исключения. Возбуждение исключения.

# Задача 1. Допишите код ниже.
#
import math

def calculate_square_root(number):
    # Добавьте проверку на отрицательное число и возбуждение исключения
    if number < 0:
        raise ValueError('число не должно быть отрицательным')
    return math.sqrt(number)

def safe_calculate_square_root(number):
    try:
        result = calculate_square_root(number)
        print(f"Квадратный корень из {number} равен {result}")
    except ValueError as e:
        print(f"Ошибка: {e}")
#
# # Тесты функции
safe_calculate_square_root(25)  # Ожидаемый результат: Квадратный корень из 25 равен 5.0
safe_calculate_square_root(-9)  # Ожидаемый результат: Ошибка: Число должно быть положительным


# Задача 2. Допишите код ниже.
def convert_to_number(string):
    # Добавьте проверку на некорректное значение и возбуждение исключения
    if not string.isdigit():
        raise ValueError('Введенное значение не является числом')
    return int(string)
#
def safe_convert_to_number(string):
    try:
        number = convert_to_number(string)
        print(f"Конвертированное число: {number}")
    except ValueError as e:
        print(f"Ошибка: {e}")
#
# # Тесты функции
safe_convert_to_number("123")  # Ожидаемый результат: Конвертированное число: 123
safe_convert_to_number("abc")  # Ожидаемый результат: Ошибка: Введенное значение не является числом


# Тема: Интеграционная практика. Мини-проект

# Проект: Перепишите проект из уроков 7-8, 14, добавив в него обработку ошибок, где это необходимо.
#
# Используйте файл как базу данных проекта.
# Управление инвентарем в интернет-магазине
# Разработайте программу для управления инвентарем интернет-магазина.
# Программа должна позволять добавлять новые товары и удалять имеющиеся,
# обновлять наименование, цену и количество существующих товаров,
# искать товары по названию, выводить список всех товаров и их количество,
# а также выводить товары с количеством ниже заданного значения стоимости и количества.
#
# Меню:
# 1. Показать список товаров.
# 2. Добавить товар.
# 3. Удалить товар.
# 4. Обновить название товара, стоимость или количество.
# 5. Найти товар по названию.
# 6. Вывести список товаров меньше определнной стоимости.
# 7. Вывести список товаров меньше определенного количества.









РЕФАКТОРИНГ РАНЕЕ СОЗДАННЫХ ИГР

1. Угадай число (guess_number.py)

- Добавить логирование действий (попыток пользователя) с использованием модуля `datetime`.
В файл записывается время начало игры, время и значение каждой попытки, время окончания игры и результат.
- Добавить обработку ошибок с использованием `try/except`, где это необходимо.


2. Камень, ножницы, бумага (rock_paper_scissors.py)

- Добавить логирование действий пользователя с использованием модуля `datetime`.
В файл записывается время начало игры, время и значения ходов компьютера и пользователя,
время окончания игры и результат.
- Добавить обработку ошибок с использованием `try/except`, где это необходимо.
- Использовать генераторы для создания последовательности ходов компьютера.


3. Викторина (quiz_game.py)

- Добавить загрузку вопросов и ответов из файла JSON.
- Добавить обработку ошибок с использованием `try/except`, где это необходимо.
- Добавить необходимость указания имени и фамилии перед прохождением теста.
- По итогу теста должен создаваться текстовый файл, где должно быть указано:
    - Имя и фамилия испытуемого.
    - Время начала и окончания теста.
    - Общее количество вопросов, количество правильных ответов, процент выполнения теста.
    - Все тестовые вопросы, ответы пользователя на них, правильные ответы и указание,
    ответил пользователь правильно или нет (True, False)


4. Виселица (hangman.py/)

- Добавить логирование начала и окончания игры и всех попыток игрока с временными метками (дата и время).
- Добавить обработку ошибок с использованием `try/except`, где это необходимо.
- Добавить возможность сохранять текущий прогресс игры в файл для продолжения игры позже,
если игра не была завершена победой или поражением (то есть было прерывание программы во время игры).


5. Текстовый квест (text_adventure.py)

- Добавить логирование начала и окончания игры и всех ходов игрока с временными метками (дата и время).
- Добавить обработку ошибок с использованием `try/except`, где это необходимо.
- Сюжет игры должен подгружаться из файла JSON.
- Добавить сохранение и загрузку состояния игры с использованием файлов в формате JSON.
Если программа была прервана по ходу игры, то пользователь при старте программы начинает с того же места.


6. Сапер (minesweeper.py/)

- Добавить логирование начала и окончания игры и всех ходов игрока с временными метками (дата и время).
- Добавить обработку ошибок с использованием `try/except`, где это необходимо.
- Добавить сохранение и загрузку состояния игры с использованием файлов в формате JSON.
Если программа была прервана по ходу игры, то пользователь при старте программы начинает с того же места.


НОВЫЕ ИГРЫ ДЛЯ GAME HUB
Разработайте с нуля две игры ниже. С учетом появления этих двух игр отредактируйте файл main.py.

1. Игра "Скорость печати" (print_speed.py)

Программа запрашивает имя и фамилию пользователя. Затем производит обратный отсчет в консоле: 3, 2, 1, “поехали”.
Далее выводит задание: Напечатай фрагмент текста из 180 символов: “какое-то предложение”.
Пользователь печатает в консоль фрагмент текста и нажимает enter.
Программа проверяет, есть ли во вводе ошибки и замеряет скорость печати.
Выводит результат:
- имя, фамилию;
- фрагмент текста, который нужно было записать;
- ввод пользователя;
- есть ошибки или нет (то есть полностью ли совпадает ввод пользователя и фрагмент текста);
- время, потраченное пользователем на ввод.

Эта же информация, плюс дата и время начала и окончания игры должна записываться в лог-файл.
Фрагменты текста для печати берутся в рандомном порядке из файла. То есть для каждой попытки из файла
выбирается какой-то участок текста на 180 символов (включая пробелы) и выдается пользователю.

Добавьте обработку ошибок с использованием `try/except`, где это необходимо.


2. Игра "Анаграммы" (anagrams.py)

Игроку дается слово, и он должен составить из его букв как можно больше других слов за одну минуту.
Слова должны содержаться в JSON файле. В каждом слове не менее 5 букв.
Для каждой игры рандомно выбирается слово и выводится пользователю.

Далее происходит отсчет одной минуты (не отображается в консоле).
В это время пользователь должен через запятую вводить слова, состоящие из тех же букв, что и заданное слово.
По истечению одной минуты программа проверяет ввод пользователя по следующим параметрам:

- Придуманные пользователем слова не дублируют заданное слово;
- Придуманные слова уникальны;
- Придуманные слова состоят из тех же букв, что и заданное слово.

Программа засчитывает только те слова, которые соответствуют критериям выше.
Как результат игры программа выводит: заданное слово, количество засчитанных слов, придуманных пользователем,
сами засчитанные слова, не засчитанные слова.
Эта же информация, плюс дата и время начала и окончания игры должна записываться в лог-файл.
Добавьте обработку ошибок с использованием `try/except`, где это необходимо.


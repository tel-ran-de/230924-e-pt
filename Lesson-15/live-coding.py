# Продемонстрируйте и объясните в режиме live-coding работу рекурсивных функций

# рекурсивная функция вычисления факториалов
print('# рекурсивная функция вычисления факториалов')

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

# 1. 5 равно 0? Нет
#    запускается рекурсивный случай
#    5 умножается на факториал 4

# 2. 4 равно 0? Нет
#    запускается рекурсивный случай
#    4 умножается на факториал 3

# 3. 3 равно 0? Нет
#    запускается рекурсивный случай
#    3 умножается на факториал 2

# 4. 2 равно 0? Нет
#    запускается рекурсивный случай
#    2 умножается на факториал 1

# 5. 1 равно 0? Нет
#    запускается рекурсивный случай
#    1 умножается на факториал 0

# 6. 0 равно 0? Да
#    запускается базовый случай
#    возвращается единица

# 7.   factorial(5)
#         factorial(4)
#             factorial(3)
#                 factorial(2)
#                     factorial(1)

# factorial(0) возвращает 1.
# factorial(1) возвращает 1 * factorial(0), что равно 1 * 1 = 1.
# factorial(2) возвращает 2 * factorial(1), что равно 2 * 1 = 2.
# factorial(3) возвращает 3 * factorial(2), что равно 3 * 2 = 6.
# factorial(4) возвращает 4 * factorial(3), что равно 4 * 6 = 24.
# factorial(5) возвращает 5 * factorial(4), что равно 5 * 24 = 120.

print(factorial(5))  # Вывод: 120

# рекурсивная распаковка списка
print('# рекурсивная распаковка списка')
def flatten(nested_list):
    flat_list = []
    for item in nested_list:
        if isinstance(item, list):
        # if type(item) == 'list':
            flat_list.extend(flatten(item))
        else:
            flat_list.append(item)
    return flat_list

nested = [1, [2, [3, 4], 5], 6]
print(flatten(nested))  # Вывод: [1, 2, 3, 4, 5, 6]
